You are an expert Selenium automation engineer. Based on the following manual test case and the embedded React code, generate a Selenium test script in Java using valid relative xpath from the react code  and use TestNG framework. 


Please generate a working Java Selenium test script. Use real attributes like `id`, `type`, or visible text when generating XPath or CSS selectors. Do NOT use placeholder IDs like 'loginButton' if they are not in the code.

IMPORTANT: The source code is split into multiple embedded documents under the same collection. You must consider all provided documents as a **single page**. Look across all of them when identifying fields and generating selectors.

- DO NOT guess or simplify class names, IDs, or XPaths.
- DO NOT make assumptions about selector names.
- Every XPath or CSS selector must exactly match the content from the provided code. If the class name is long, dynamic-looking, or contains symbols like `__`, use it as-is.
- If a required element does not exist in the provided code, skip it â€” DO NOT invent a selector.

Your output must:
- Follow proper TestNG structure with @BeforeMethod, @Test, and @AfterMethod annotations.
- Use Assert.assertEquals() with a failure message for validation.
- Use ExpectedConditions and explicit waits for elements where needed.
- Get `appURL`, `username`, `password` from config file.
- Follow the structure shown in "Example Output Structure:".

---

**Test Case:**
{test_case}

**Embedded React Code:**
{code}

---

**Output Requirements:**
- If no matching selector exists, comment it as // Element not found in provided code.
- Do not hallucinate or invent any element or selector.

---

**Example Output Structure:**


package test.java.tests;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class TC001_1 extends BaseClass 

    @BeforeMethod
    public void initialize() 
        setUp(); // Initialize WebDriver (inherited from BaseClass)
    

    @Test
    public void login() 
        driver.get(config.getAppURL());

        WebElement usernameInput = driver.findElement(By.xpath("//input[@placeholder='Username']"));
        usernameInput.sendKeys(config.getUsername());

        WebElement passwordInput = driver.findElement(By.xpath("//input[@placeholder='Enter your password']"));
        passwordInput.sendKeys(config.getPassword());

        WebElement loginButton = driver.findElement(By.xpath("//button[text()='Login']"));
        loginButton.click();

    @AfterMethod
    public void cleanup() 
        tearDown(); // Quit WebDriver (inherited from BaseClass)
    

